{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import scipy as sp\n",
    "import scipy.io as sio\n",
    "import matplotlib as mpl\n",
    "mpl.rcParams['lines.linewidth'] = 2\n",
    "#mpl.rcParams['lines.color'] = 'r'\n",
    "mpl.rcParams['figure.figsize'] = (10, 6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on function savemat in module scipy.io.matlab.mio:\n",
      "\n",
      "savemat(file_name, mdict, appendmat=True, format='5', long_field_names=False, do_compression=False, oned_as='row')\n",
      "    Save a dictionary of names and arrays into a MATLAB-style .mat file.\n",
      "    \n",
      "    This saves the array objects in the given dictionary to a MATLAB-\n",
      "    style .mat file.\n",
      "    \n",
      "    Parameters\n",
      "    ----------\n",
      "    file_name : str or file-like object\n",
      "        Name of the .mat file (.mat extension not needed if ``appendmat ==\n",
      "        True``).\n",
      "        Can also pass open file_like object.\n",
      "    mdict : dict\n",
      "        Dictionary from which to save matfile variables.\n",
      "    appendmat : bool, optional\n",
      "        True (the default) to append the .mat extension to the end of the\n",
      "        given filename, if not already present.\n",
      "    format : {'5', '4'}, string, optional\n",
      "        '5' (the default) for MATLAB 5 and up (to 7.2),\n",
      "        '4' for MATLAB 4 .mat files.\n",
      "    long_field_names : bool, optional\n",
      "        False (the default) - maximum field name length in a structure is\n",
      "        31 characters which is the documented maximum length.\n",
      "        True - maximum field name length in a structure is 63 characters\n",
      "        which works for MATLAB 7.6+.\n",
      "    do_compression : bool, optional\n",
      "        Whether or not to compress matrices on write.  Default is False.\n",
      "    oned_as : {'row', 'column'}, optional\n",
      "        If 'column', write 1-D numpy arrays as column vectors.\n",
      "        If 'row', write 1-D numpy arrays as row vectors.\n",
      "    \n",
      "    See also\n",
      "    --------\n",
      "    mio4.MatFile4Writer\n",
      "    mio5.MatFile5Writer\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(sio.savemat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "ERROR:root:Line magic function `%E` not found.\n",
      "ERROR:root:Line magic function `%I` not found.\n",
      "ERROR:root:Line magic function `%rho` not found.\n",
      "ERROR:root:Line magic function `%A` not found.\n",
      "ERROR:root:Line magic function `%L` not found.\n"
     ]
    }
   ],
   "source": [
    "% E=7.31e10;\n",
    "% I=1/12*.03*.015^3;\n",
    "% rho=2747;\n",
    "% A=.015*.03;\n",
    "% L=0.4;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  7.31000000e+10,   8.43750000e-09,   2.74700000e+03,\n",
       "         4.50000000e-04,   4.00000000e-01])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sp.array((7.31e10, 1/12*0.03*.015**3, 2747, .015*0.03, 0.4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "[10 10]\n",
      "[10 10]\n",
      "(2,)\n",
      "2\n"
     ]
    }
   ],
   "source": [
    "n = 10\n",
    "print(n)\n",
    "nn = sp.array((n,n))\n",
    "print(nn)\n",
    "nnn = sp.array((nn))\n",
    "print(nnn)\n",
    "print(nn.shape)\n",
    "\n",
    "n = nn\n",
    "if isinstance( n, int ):\n",
    "    ln = 1\n",
    "else:\n",
    "    ln = len(n)\n",
    "print(ln)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "hide_input": false
   },
   "outputs": [],
   "source": [
    "def euler_beam_modes(n = 10, bctype = 2, beamparams=sp.array((7.31e10, 1/12*0.03*.015**3, 2747, .015*0.03, 0.4)), npoints = 2001):\n",
    "\n",
    "\n",
    "    \"\"\"\n",
    "    %VTB6_3 Natural frequencies and mass normalized mode shape for an Euler-\n",
    "    % Bernoulli beam with a chosen boundary condition.\n",
    "    % [w,x,U]=VTB6_3(n,bctype,bmpar,npoints) will return the nth natural \n",
    "    % frequency (w) and mode shape (U) of an Euler-Bernoulli beam.\n",
    "    % If n is a vector, return the coresponding mode shapes and natural\n",
    "    % frequencies.\n",
    "    % With no output arguments the modes are ploted.\n",
    "    % If only one mode is requested, and there are no output arguments, the\n",
    "    % mode shape is animated.\n",
    "    % The boundary condition is defined as follows:\n",
    "    %\n",
    "    % bctype = 1 free-free\n",
    "    % bctype = 2 clamped-free\n",
    "    % bctype = 3 clamped-pinned\n",
    "    % bctype = 4 clamped-sliding\n",
    "    % bctype = 5 clamped-clamped\n",
    "    % bctype = 6 pinned-pinned\n",
    "    %\n",
    "    % The beam parameters are input through the vector bmpar:\n",
    "    % bmpar = [E I rho A L];\n",
    "    % where the variable names are consistent with Section 6.5 of the \n",
    "    % text.\n",
    "    %\n",
    "    %% Example: 20 cm long aluminum beam with h=1.5 cm, b=3 cm\n",
    "    %% Animate the 4th mode for free-free boundary conditions\n",
    "    % E=7.31e10;\n",
    "    % I=1/12*.03*.015^3;\n",
    "    % rho=2747;\n",
    "    % A=.015*.03;\n",
    "    % L=0.2;\n",
    "    % vtb6_3(4,1,[E I rho A L]);\n",
    "    %\n",
    "\n",
    "    % Copyright Joseph C. Slater, 2007\n",
    "    % Engineering Vibration Toolbox\n",
    "    \"\"\"\n",
    "    E=beamparams[0];\n",
    "    I=beamparams[1];\n",
    "    rho=beamparams[2];\n",
    "    A=beamparams[3];\n",
    "    L=beamparams[4];\n",
    "    if isinstance( n, int ):\n",
    "        ln = n\n",
    "        n = sp.arange(n)+1\n",
    "    else:\n",
    "        ln = len(n)\n",
    "\n",
    "    #len=[0:(1/(npoints-1)):1]';  %Normalized length of the beam\n",
    "    len = sp.linspace(0,1,npoints)\n",
    "    x = len * L\n",
    "    #Determine natural frequencies and mode shapes depending on the\n",
    "    #boundary condition.\n",
    "    # Mass simplification. The following was arange_(1,length_(n)).reshape(-1)\n",
    "    mode_num_range = sp.arange(0,ln)\n",
    "    Bnl = sp.empty(ln)\n",
    "    w = sp.empty(ln)\n",
    "    U = sp.empty([npoints, ln])\n",
    "    \n",
    "    if bctype == 1:\n",
    "        desc='Free-Free '\n",
    "        Bnllow=sp.array((0,0,4.73004074486,7.8532046241,10.995607838,14.1371654913,17.2787596574))\n",
    "        for i in mode_num_range:\n",
    "            if n[i] > 7:\n",
    "                Bnl[i]=(2 * n[i] - 3) * sp.pi / 2\n",
    "            else:\n",
    "                Bnl[i]=Bnllow[i]\n",
    "        for i in mode_num_range:\n",
    "            if n[i] == 1:\n",
    "                w[i]=0\n",
    "                U[:,i]=1 + len * 0\n",
    "            elif n[i] == 2:\n",
    "                w[i]=0\n",
    "                U[:,i]=len - 0.5\n",
    "            else:\n",
    "                sig=(sp.cosh(Bnl[i]) - sp.cos(Bnl[i])) / (sp.sinh(Bnl[i]) - sp.sin(Bnl[i]))\n",
    "                w[i]=(Bnl[i] ** 2) * sp.sqrt(E * I / (rho * A * L ** 4))\n",
    "                b=Bnl[i] * len\n",
    "                U[:,i]=sp.cosh(b) + sp.cos(b) - sig * (sp.sinh(b) + sp.sin(b))\n",
    "    elif bctype == 2:\n",
    "        desc='Clamped-Free '\n",
    "        Bnllow=sp.array((1.88,4.69,7.85,10.99,14.14))\n",
    "        for i in mode_num_range:\n",
    "            if n[i] > 4:\n",
    "                Bnl[i]=(2 * n[i] - 1) * sp.pi / 2\n",
    "            else:\n",
    "                Bnl[i]=Bnllow[i]\n",
    "        \n",
    "        for i in mode_num_range:\n",
    "            sig=(sp.sinh(Bnl[i]) - sp.sin(Bnl[i])) / (sp.cosh(Bnl[i]) - sp.cos(Bnl[i]))\n",
    "            w[i]=(Bnl[i] ** 2) * sp.sqrt(E * I / (rho * A * L ** 4))\n",
    "            b=Bnl[i] * len\n",
    "            #plt.plot(x,(sp.cosh(b) - sp.cos(b) - sig * (sp.sinh(b) - sp.sin(b))))\n",
    "            U[:,i]=sp.cosh(b) - sp.cos(b) - sig * (sp.sinh(b) - sp.sin(b))\n",
    "            \n",
    "    elif bctype == 3:\n",
    "        desc='Clamped-Pinned '\n",
    "        Bnllow=sp.array((3.93,7.07,10.21,13.35,16.49))\n",
    "        for i in mode_num_range:\n",
    "            if n[i] > 4:\n",
    "                Bnl[i]=(4 * n[i] + 1) * sp.pi / 4\n",
    "            else:\n",
    "                Bnl[i]=Bnllow[i]\n",
    "        for i in mode_num_range:\n",
    "            sig=(sp.cosh(Bnl[i]) - sp.cos(Bnl[i])) / (sp.sinh(Bnl[i]) - sp.sin(Bnl[i]))\n",
    "            w[i]=(Bnl[i] ** 2) * sp.sqrt(E * I / (rho * A * L ** 4))\n",
    "            b=Bnl[i] * len\n",
    "            U[:,i]=sp.cosh(b) - sp.cos(b) - sig * (sp.sinh(b) - sp.sin(b))\n",
    "    elif bctype == 4:\n",
    "        desc='Clamped-Sliding '\n",
    "        Bnllow=sp.array((2.37,5.5,8.64,11.78,14.92))\n",
    "        for i in mode_num_range:\n",
    "            if n[i] > 4:\n",
    "                Bnl[i]=(4 * n[i] - 1) * sp.pi / 4\n",
    "            else:\n",
    "                Bnl[i]=Bnllow[i]\n",
    "        for i in mode_num_range:\n",
    "            sig=(sp.sinh(Bnl[i]) + sp.sin(Bnl[i])) / (sp.cosh(Bnl[i]) - sp.cos(Bnl[i]))\n",
    "            w[i]=(Bnl[i] ** 2) * sp.sqrt(E * I / (rho * A * L ** 4))\n",
    "            b=Bnl[i] * len\n",
    "            U[:,i]=sp.cosh(b) - sp.cos(b) - sig * (sp.sinh(b) - sp.sin(b))\n",
    "    elif bctype == 5:\n",
    "        desc='Clamped-Clamped '\n",
    "        Bnllow=sp.array((4.73,7.85,11,14.14,17.28))\n",
    "        for i in mode_num_range:\n",
    "            if n[i] > 4:\n",
    "                Bnl[i]=(2 * n[i] + 1) * sp.pi / 2\n",
    "            else:\n",
    "                Bnl[i]=Bnllow[i]\n",
    "        for i in mode_num_range:\n",
    "            sig=(sp.cosh(Bnl[i]) - sp.cos(Bnl[i])) / (sp.sinh(Bnl[i]) - sp.sin(Bnl[i]))\n",
    "            w[i]=(Bnl[i] ** 2) * sp.sqrt(E * I / (rho * A * L ** 4))\n",
    "            b=Bnl[i] * len\n",
    "            U[:,i]=sp.cosh(b) - sp.cos(b) - sig * (sp.sinh(b) - sp.sin(b))\n",
    "    elif bctype == 6:\n",
    "        desc='Pinned-Pinned '\n",
    "        for i in mode_num_range:\n",
    "            Bnl[i]=n[i] * sp.pi\n",
    "            w[i]=(Bnl[i] ** 2) * sp.sqrt(E * I / (rho * A * L ** 4))\n",
    "            U[:,i]=sp.sin(Bnl[i] * len)\n",
    "    \n",
    "    \n",
    "    # Mass Normalization of mode shapes\n",
    "    for i in mode_num_range:\n",
    "        U[:,i]=U[:,i] / sp.sqrt(sp.dot(U[:,i], U[:,i]) * rho * A * L)\n",
    "    \n",
    "    \"\"\"\n",
    "    ppause=0\n",
    "    x=len * L\n",
    "    if nargout == 0:\n",
    "        if length_(n) != 1:\n",
    "            for i in arange_(1,length_(n)).reshape(-1):\n",
    "                plot_(x,U[:,i])\n",
    "                axis_([0,L,min_(min_(U)),max_(max_(U))])\n",
    "                figure_(gcf)\n",
    "                title_([desc,char('  '),char('Mode '),int2str_(i),char('     Natural Frequency = '),num2str_(w[i]),char(' rad/s')])\n",
    "                ylabel_(char('Modal Amplitude'))\n",
    "                xlabel_(char('Length along bar - x'))\n",
    "                grid_(char('on'))\n",
    "                disp_(char('Press return to continue'))\n",
    "                pause\n",
    "        else:\n",
    "            nsteps=50\n",
    "            clf\n",
    "            step=2 * pi / (nsteps)\n",
    "            i=arange_(0,(2 * pi - step),step)\n",
    "            hold_(char('off'))\n",
    "            handle=uicontrol_(char('style'),char('pushbutton'),char('units'),char('normal'),char('backgroundcolor'),char('red'),char('position'),[0.94,0.94,0.05,0.05],char('String'),char('Stop'),char('callback'),char('global stopstop;stopstop=1;'))\n",
    "            handle2=uicontrol_(char('style'),char('pushbutton'),char('units'),char('normal'),char('backgroundcolor'),char('yellow'),char('position'),[0.94,0.87,0.05,0.05],char('String'),char('Pause'),char('callback'),char('global ppause;ppause=1;'))\n",
    "            handle3=uicontrol_(char('style'),char('pushbutton'),char('units'),char('normal'),char('backgroundcolor'),char('green'),char('position'),[0.94,0.8,0.05,0.05],char('String'),char('Resume'),char('callback'),char('global ppause;ppause=0;'))\n",
    "            stopstop=0\n",
    "            bb=0\n",
    "            while stopstop == 0 and bb < 100:\n",
    "\n",
    "                bb=bb + 1\n",
    "                for ii in [i].reshape(-1):\n",
    "                    while ppause == 1:\n",
    "\n",
    "                        pause_(0.01)\n",
    "                        if stopstop == 1:\n",
    "                            delete_(handle)\n",
    "                            delete_(handle2)\n",
    "                            delete_(handle3)\n",
    "                            return w,x,U\n",
    "\n",
    "                    plot_(x,U[:,1] * sp.cos(ii))\n",
    "                    axis_([0,L,- max_(abs_(U)),max_(abs_(U))])\n",
    "                    grid_(char('on'))\n",
    "                    figure_(gcf)\n",
    "                    title_([desc,char('  '),char('Mode '),int2str_(n),char('     \\\\omega_n = '),num2str_(w[1]),char(' rad/s')])\n",
    "                    ylabel_(char('Modal Amplitude'))\n",
    "                    xlabel_(char('Length along bar - x'))\n",
    "                    drawnow\n",
    "\n",
    "            clear_(char('stopstop'))\n",
    "            delete_(handle)\n",
    "            delete_(handle2)\n",
    "            delete_(handle3)\n",
    "    \"\"\"\n",
    "    return w,x,U\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "w, x, U = euler_beam_modes(bctype = 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([   2156.23014267,    6978.28720537,   14553.30048206,\n",
       "         24881.26997273,   37977.67418807,   53823.23439353,\n",
       "         72424.54419993,   93781.60360728,  117894.41261558,\n",
       "        144762.97122483])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "w"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  0.00000000e+00,   2.00000000e-04,   4.00000000e-04, ...,\n",
       "         3.99600000e-01,   3.99800000e-01,   4.00000000e-01])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[  0.00000000e+00,   0.00000000e+00,   0.00000000e+00, ...,\n",
       "          0.00000000e+00,   0.00000000e+00,   0.00000000e+00],\n",
       "       [  1.22651479e-07,   3.96864950e-07,   8.27322823e-07, ...,\n",
       "          5.31724879e-06,   6.68088672e-06,   8.19908207e-06],\n",
       "       [  4.90284171e-07,   1.58558703e-06,   3.30365038e-06, ...,\n",
       "          2.11767211e-05,   2.65934872e-05,   3.26193644e-05],\n",
       "       ..., \n",
       "       [  1.81038976e-04,  -3.17082136e-04,   4.59255808e-04, ...,\n",
       "         -1.16550055e-03,   1.30427373e-03,  -1.24215236e-03],\n",
       "       [  9.05190810e-05,  -1.58541266e-04,   2.29631101e-04, ...,\n",
       "         -5.82750276e-04,   6.52136864e-04,  -7.45291418e-04],\n",
       "       [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00, ...,\n",
       "          0.00000000e+00,   0.00000000e+00,   0.00000000e+00]])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "U"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([   343.17468565,   1110.62890305,   2316.22971002,   3959.97710656,\n",
       "         6044.33457417,   8566.23380692,  11526.7242106 ,  14925.80578518,\n",
       "        18763.47853068,  23039.7424471 ])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "w/2/sp.pi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x115d54898>]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x115cfb748>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(x,U[:,0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0437720617908548\n",
      "0.04377206239552288\n",
      "0.0437720630001909\n",
      "0.04380822974151261\n"
     ]
    }
   ],
   "source": [
    "from scipy.interpolate import UnivariateSpline\n",
    "spl = UnivariateSpline(x, U[:,0])\n",
    "print(spl(0.20000001))\n",
    "print(spl(0.200000015))\n",
    "print(spl(0.20000002))\n",
    "print(spl(0.2003))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import scipy as sp\n",
    "from scipy.interpolate import UnivariateSpline\n",
    "\n",
    "def euler_beam_frf(xin=0.22,xout=0.22,fmin=0.0,fmax=1000.0,beamparams=sp.array((7.31e10, 1/12*0.03*.015**3, 2747, .015*0.03, 0.4)), bctype = 2, zeta = 0.02):\n",
    "\n",
    "    E=beamparams[0];\n",
    "    I=beamparams[1];\n",
    "    rho=beamparams[2];\n",
    "    A=beamparams[3];\n",
    "    L=beamparams[4];\n",
    "    npoints=2001\n",
    "    i=0\n",
    "    w=sp.linspace(fmin, fmax, 2001) * 2 * sp.pi\n",
    "    if min([xin,xout]) < 0 or max([xin,xout]) > L:\n",
    "        disp_(char('One or both locations are not on the beam'))\n",
    "        return\n",
    "    wn=sp.array((0,0))\n",
    "    # The number 100 is arbitrarily large and unjustified. \n",
    "    a = sp.empty([npoints, 100], dtype=complex)\n",
    "    f = sp.empty(100)\n",
    "    \n",
    "    while wn[-1] < 1.3 * (fmax * 2 * sp.pi):\n",
    "\n",
    "        i=i + 1\n",
    "        #legtext[i + 1]=[char('Contribution of mode '),num2str_(i)]\n",
    "        wn,xx,U=euler_beam_modes(i,bctype,beamparams,npoints = 5000)\n",
    "        print(wn)\n",
    "        spl = UnivariateSpline(xx, U[:,i-1])\n",
    "        Uin = spl(xin)\n",
    "        Uout = spl(xout)\n",
    "        #Uin=spline_(xx,U,xin)\n",
    "        #Uout=spline_(xx,U,xout)\n",
    "        \n",
    "        #print(wn[-1])\n",
    "        #print(w)\n",
    "        a[:,i-1]=rho * A * Uin * Uout / (wn[-1] ** 2 - w ** 2 + 2 * zeta * wn[-1] * w * sp.sqrt(-1))\n",
    "        #print(a[0:10,i])\n",
    "        #plt.plot(sp.log10(sp.absolute(a[:,i])))\n",
    "        #input(\"Press Enter to continue...\")\n",
    "        f[i]=wn[-1] / 2 / sp.pi\n",
    "    a=a[:,0:i]\n",
    "    plt.subplot(211)\n",
    "    plt.plot(w / 2 / sp.pi,20 * sp.log10(sp.absolute(sp.sum(a,axis = 1))),'-')\n",
    "    #plt.hold('on')\n",
    "    plt.plot(w / 2 / sp.pi,20 * sp.log10(sp.absolute(a)),'-')\n",
    "    plt.grid('on')\n",
    "    plt.xlabel('Frequency (Hz)')\n",
    "    plt.ylabel('FRF (dB)')\n",
    "    axlim = plt.axis()\n",
    "    \n",
    "    plt.axis(axlim + sp.array([0, 0, -0.1*(axlim[3]-axlim[2]), 0.1*(axlim[3]-axlim[2])]))\n",
    "    \n",
    "    \n",
    "    plt.subplot(212)\n",
    "    plt.plot(w / 2 / sp.pi,sp.unwrap(sp.angle(sp.sum(a,axis = 1))) / sp.pi * 180,'-')\n",
    "    #plt.hold('on')\n",
    "    plt.plot(w / 2 / sp.pi,sp.unwrap(sp.angle(a)) / sp.pi * 180,'-')\n",
    "    plt.grid('on')\n",
    "    plt.xlabel('Frequency (Hz)')\n",
    "    plt.ylabel('Phase (deg)')\n",
    "    axlim = plt.axis()\n",
    "    plt.axis(axlim + sp.array([0, 0, -0.1*(axlim[3]-axlim[2]), 0.1*(axlim[3]-axlim[2])]))\n",
    "    \n",
    "\n",
    "    fout=w / 2 / sp.pi\n",
    "    H = a\n",
    "    return fout,H\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 493.43018189]\n",
      "[  493.43018189  3070.82945446]\n",
      "[  493.43018189  3070.82945446  8602.98816869]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nrkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x119b1b828>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fout, H = euler_beam_frf()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 349,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 349,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x114753390>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "a =plt.axis()\n",
    "a[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 329,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "can't convert complex to float",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-329-33d3df78acfc>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mH\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1.j\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m: can't convert complex to float"
     ]
    }
   ],
   "source": [
    "H[1,1] = 1+1.j"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  0.00000000e+00,   3.22778969e-05,   1.28565322e-04,\n",
       "         2.88042879e-04,   5.09891177e-04,   7.93290832e-04,\n",
       "         1.13742248e-03,   1.54146679e-03,   2.00460446e-03,\n",
       "         2.52601625e-03])"
      ]
     },
     "execution_count": 224,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sp.sum(U[0:10,0:10],axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "hide_input": false,
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  },
  "latex_envs": {
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 0
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
